Aug 23, 2006

COMPILE, INSTALL
-------------------------------------------------------------------------------

tar xvf anc_rec_simDATE.tar.gz
cd anc_rec_simDATE/src/
make depend
make
make install
     This puts the executables SimTreeSDD and TreeLike in /usr/local/bin/ if
      file permissions allow; if not, put them elsewhere in your path or specify
      the full path to this location.

If you get any compiler warnings or errors, let me know, because you shouldn't.


USAGE
-------------------------------------------------------------------------------

It's good to keep your parameter and output files together in subdirectories.
anc_rec_simDATE/sim_results/ is provided as a starting point, so cd there first.

There are programs for two types of operations.

1) SimTreeSDD: Create a tree by simulation of a state-dependent birth-death process.
   Call the program SimTreeSDD with a file containing your specifications:
***        SimTreeSDD params_SimTreeSDD.dat
       (or give the path to SimTreeSDD if necessary, e.g. ../src/SimTreeSDD)
   For the format and available options in params_SimTreeSDD.dat, see the
     included example file sim_results/params_SimTreeSDD.dat.
   The results are placed in whichever output files you asked for.

2) TreeLike: Do something likelihood-related with an existing tree.
   Call the program TreeLike with a parameter file and one or more trees in 
     .ttn format (see FILE FORMATS below):
***        TreeLike params_TreeLike.dat tree1.ttn tree2.ttn
   For the format and available options in params_TreeLike.dat, see the
     included example file sim_results/params_TreeLike.dat.
   The results are placed in several output files.


FILE FORMATS
-------------------------------------------------------------------------------

Input parameter files:
     See params_SimTreeSDD.dat and params_TreeLike.dat for options you can define.
     Note that lines (or partial lines) beginning with # are comments.

Input tree files for TreeLike:
     TreeLike reads in trees in .ttn format, which is something I made up.
     This is a text file containing the tree in Newick format, a list of the
       tips (in downpass order) and their character states, and (optionally)
       the internal nodes (in downpass order) and their character states.
     Hence, ttn = tree, tips, nodes.

Files for external programs:
     The tree simulator can write files to be used by Mesquite, Hy-Phy, or
       BayesMultiState; see params_SimTreeSDD.dat.


LIMITATIONS
-------------------------------------------------------------------------------

There is not much error checking on the input parameter and tree files,
so try to get them right, and check them if something crashes.
TODO: could have a small program (CheckTTN) to check hand-made .ttn files.

Ancestral state reconstruction is now implemented, using the "global, marginal"
method.  As the code stands, the results agree perfectly with Mesquite.  There
are two issues, though.
1) Conditional likelihoods at the root are not now weighted by the stationary
distribution of node states.  I think they should be, but when I do this, the
results are slightly different than Mesquite's.
2) Reconstructions roughly, but by no means precisely, agree with BayesMS (except for the root, which agrees perfectly).  I suspected that BayesMS may
use local, rather than global, reconstruction, so I added in code for local
reconstruction (not included here), and this made some of my results more
similar to BayesMS and some not.  So I'm not sure what's going on with BMS.
(It may be worth noting that the local method is generally less sure about its
node reconstructions than is the global method, and BayesMS is generally less
sure than Mesquite.)

In one corner of parameter space (large values of smaller transition rate and
small values of larger rate), likelihoods get small enough that machine
precision is a problem, especially for large (or combined) trees (~500+ tips).
This does not seem to mess up the likelihood maximization unless the "corner"
becomes most of the space (thousands of tips), but I need a way of avoiding
it.  So for very large trees, be wary and take a look at the likelihood surface.


CODE CREDITS
-------------------------------------------------------------------------------

John Huelsenbeck: TreeNode, recursive tree-walking functions, conditional
  likelihood explanation and example
Walter Brisken: keyvalue and corresponding input parts, Makefile
Stephen Smith (via blackrim.org): ReadTreeString (his readnw.txt)
Numerical Recipes: amoeba


CONTACT
-------------------------------------------------------------------------------
Emma Goldberg: goldberg@biomail.ucsd.edu
